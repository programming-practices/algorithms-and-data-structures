/**
 * Алгоритм Косарайю (Kosaraju):
 * Этот алгоритм также известен как алгоритм Косарайю-Шарира. Он решает задачу выявления компонента сильной связности в
 * ориентированном графе и делает это за линейное время. Идея алгоритма опирается на тот факт, что транспонированный
 * граф (направление каждого ребра исходного графа изменено на противоположное) имеет точно такие же сильно связанные
 * компоненты, что и исходный.
 *
 * Алгоритм:
 * 1. Отсортировать граф топологически, то есть:
 *      1. выполнить data_structures.graphs.a2.DFS, сохраняя время выхода для каждой вершины;
 *      2. отсортировать вершины в порядке убывания по времени выхода − это и получится топологически отсортированный граф.
 * 2. Транспонировать граф.
 * 3. Обойти граф с помощью data_structures.graphs.a2.DFS или data_structures.graphs.a2.BFS, выбирая вершины согласно топологическому порядку.
 *      1. все достижимые вершины добавляются в список, соответствующий текущей компоненте связности;
 *      2.как только встретится вершина, из которой не существует пути в еще не посещенную вершину, нужно добавить новую компоненту связности и сохранять последующие вершины там.
 *
 * Нужно отметить:
 *      1. Алгоритм Косарайю выполняет два обхода графа. Его сложность составляет O(|V| + |E|).
 *      2. Этот алгоритм очень прост, но алгоритм Тарьяна для той же задачи на практике работает эффективнее.
 *      3. Если граф представлен как матрица смежности, то время его работы квадратично.
 *
 *
 * */
package algorithms.kosaraju;